1)
-- ANSWER
DROP TABLE IF EXISTS health_tracker_data_2020;              

CREATE TABLE health_tracker_data_2020                        
USING json                                             
OPTIONS (
  path "dbfs:/mnt/training/healthcare/tracker/raw.json",
  inferSchema "true"
  );
  
  2)
  
  -- ANSWER
SELECT * FROM health_tracker_data_2020 TABLESAMPLE (5 ROWS)

%3)
-- ANSWER
SELECT COUNT(*) FROM health_tracker_data_2020

4)
%%%%%
-- ANSWER
CREATE OR REPLACE TABLE health_tracker_silver 
USING DELTA
PARTITIONED BY (p_device_id)
LOCATION "dbfs:/health_tracker/silver" AS (
SELECT
  value.name,
  value.heartrate,
  CAST(FROM_UNIXTIME(value.time) AS timestamp) AS time,
  CAST(FROM_UNIXTIME(value.time) AS DATE) AS dte,
  value.device_id p_device_id
FROM
  health_tracker_data_2020
)

%%%%% 5)

-- ANSWER
DROP TABLE IF EXISTS health_tracker_silver;
CREATE TABLE health_tracker_silver
USING DELTA
LOCATION "/health_tracker/silver"

%%%%%  6)
--ANSWER

SELECT p_device_id, COUNT(*) FROM health_tracker_silver GROUP BY p_device_id

%%%%%% 7)
--ANSWER
SELECT * FROM health_tracker_silver WHERE p_device_id IN (3,4)

%%%%%%% 8)
--ANSWER
CREATE OR REPLACE TEMPORARY VIEW broken_readings
AS (
  SELECT COUNT(*) as broken_readings_count, dte FROM health_tracker_silver
  WHERE heartrate < 0
  GROUP BY dte
  ORDER BY dte
);

SELECT * FROM broken_readings;

%%%% 9) repair the result

--ANSWER
CREATE OR REPLACE TEMPORARY VIEW updates 
AS (
  SELECT name, (prev_amt+next_amt)/2 AS heartrate, time, dte, p_device_id
  FROM (
    SELECT *, 
    LAG(heartrate) OVER (PARTITION BY p_device_id, dte ORDER BY p_device_id, dte) AS prev_amt, 
    LEAD(heartrate) OVER (PARTITION BY p_device_id, dte ORDER BY p_device_id, dte) AS next_amt 
    FROM health_tracker_silver
  ) 
  WHERE heartrate < 0
);

SELECT COUNT(*) FROM updates;

%%%%%%%% 10) read the late arriving data
--ANSWER
DROP TABLE IF EXISTS late_arriving_data;              

CREATE TABLE late_arriving_data                        
USING json                                             
OPTIONS (
  path "dbfs:/mnt/training/healthcare/tracker/raw-late.json",
  inferSchema "true"
  );
  

SELECT COUNT(*) FROM late_arriving_data

%%%%%% 11) Prepare inserts

--ANSWER
CREATE OR REPLACE TEMPORARY VIEW inserts AS (
  SELECT
    value.name,
    value.heartrate,
    CAST(FROM_UNIXTIME(value.time) AS timestamp) AS time,
    CAST(FROM_UNIXTIME(value.time) AS DATE) AS dte,
    value.device_id p_device_id
  FROM
    late_arriving_data
);


%%%%%%%%% 12) Prepare upserts

--ANSWER
CREATE OR REPLACE TEMPORARY VIEW upserts
AS (
    SELECT * FROM updates 
    UNION ALL 
    SELECT * FROM inserts
    );

SELECT COUNT(*) FROM upserts;

%%%%%%%%%% 13)

--ANSWER

MERGE INTO health_tracker_silver                             
USING upserts

ON health_tracker_silver.time = upserts.time AND        
   health_tracker_silver.p_device_id = upserts.p_device_id   
   
WHEN MATCHED THEN                                            
  UPDATE SET
  health_tracker_silver.heartrate = upserts.heartrate   
WHEN NOT MATCHED THEN                                        
  INSERT (name, heartrate, time, dte, p_device_id)              
  VALUES (name, heartrate, time, dte, p_device_id);
  
  %%%%%%%14)
  --ANSWER
DROP TABLE IF EXISTS health_tracker_gold;              

CREATE TABLE health_tracker_gold                        
USING DELTA
LOCATION "/health_tracker/gold"
AS 
SELECT 
  AVG(heartrate) AS meanHeartrate,
  STD(heartrate) AS stdHeartrate,
  MAX(heartrate) AS maxHeartrate
FROM health_tracker_silver
GROUP BY p_device_id;
